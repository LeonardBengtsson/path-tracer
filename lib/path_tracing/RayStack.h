//
// Created by Leonard on 2025-01-24.
//

#ifndef RAYSTACK_H
#define RAYSTACK_H

#include <stack>

#include "LightTransformation.h"
#include "../render/LightSpectrum.h"
#include "../math/Matrix4x4.h"
#include "../math/Vec2.h"
#include "../scene/Scene.h"



class Scene;

/**
 * Manages the recursive path tracing algorithm by storing and evaluating light paths in the form of rays with their
 * associated light tranformation.
 */
class RayStack {
private:
    class Entry {
    public:
        const Ray ray;
        const size_t depth;
        const double distance;
        const LightTransformation light_transformation;

        Entry(Ray ray, size_t depth, double distance, const LightTransformation &light_transformation);
    };

    const Matrix4x4 projection_matrix;

    double solid_angle;
    std::stack<Entry> stack;

    size_t current_depth;
    double current_distance;
    LightTransformation current_transformation;

public:
    explicit RayStack(const Matrix4x4 &projection_matrix = Matrix4x4::IDENT);

    /**
     * Initializes the ray stack for a specific pixel.
     * @param v_fov The vertical field-of-view of the camera view, in radians.
     * @param aspect_ratio The ratio of the width and the height of the output image.
     * @param screen_pos The position of the current pixel on the screen, as a vector of coordinates in the range
     * [0, 1].
     */
    void init(double v_fov, double aspect_ratio, Vec2 screen_pos);

    /**
     * Push a ray to the stack, applying the given light transformation to it and all its children.
     * @param delta_dist The distance that light has travelled from the ray's parent ray.
     * @param additional_depth The amount of additional surface interactions since the ray's parent ray.
     */
    void push(const Ray &ray, const LightTransformation &light_transformation, double delta_dist = 0,
        size_t additional_depth = 0);

    void clear();

    /**
     * @return The light spectrum generated by tracing a ray determined by the initialization parameters through the
     * scene.
     */
    LightSpectrum trace(const Scene &scene);
};



#endif //RAYSTACK_H
